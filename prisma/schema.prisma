// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"

  // The namespace to generate the types in.
  namespace = "PrismaJson"

  // If untyped JSON fields should be any instead of `unknown`.
  allowAny = false
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id     String @id @unique
  name   String
  email  String @unique
  avatar String

  tables Timetable[]
  apps   TimetableApplication[]
}

enum TimetableState {
  DRAFT
  APPLY
  ASSIGN
}

model TimetableApplication {
  row     TimetableRow @relation(fields: [rowId, tableId], references: [id, tableId])
  rowId   Int
  tableId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  /// [Range]
  range Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id(name: "id", [rowId, userId])
  @@index([tableId, rowId, userId])
}

model TimetableRow {
  id Int @id @unique @default(autoincrement())

  table   Timetable @relation(fields: [tableId, userId], references: [id, userId])
  tableId Int
  userId  String

  name  String
  start DateTime
  apps  TimetableApplication[]
  /// [Slot]
  slots Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, tableId])
  @@index([tableId])
}

model Timetable {
  id Int @id @unique @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name        String
  description String
  state       TimetableState
  applyLimit  DateTime?
  rows        TimetableRow[] @relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, userId])
}
